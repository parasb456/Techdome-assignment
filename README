# Multi-Container Application Deployment

This repository contains everything you need to deploy a multi-container application using Docker Compose and Kubernetes, with components for backend, frontend, and database services.

## Components

### Backend
- Repository: [Techdome-backend](https://github.com/Anand-1432/Techdome-backend)
- Description: Contains backend components of the application.

### Frontend
- Repository: [Techdome-frontend](https://github.com/Anand-1432/Techdome-frontend)
- Description: Contains frontend components of the application.

## Installation and Setup

To set up the application locally:

1. Clone the backend and frontend repositories:
   ```bash
   git clone https://github.com/Anand-1432/Techdome-backend.git
   git clone https://github.com/Anand-1432/Techdome-frontend.git
   ```

# Task 2: Docker Compose Deployment

This section covers deploying the application using Docker Compose. It includes building Docker images for the backend and frontend, and using a MongoDB database container.

### Backend

Build the backend Docker image:
```bash
cd Techdome-backend
docker build -t techdome-backend .
```

### Frontend

Build the frontend Docker image:
```bash
cd ../Techdome-frontend
docker build -t techdome-frontend .
```

### Database (MongoDB)

Pull the MongoDB image from Docker Hub:
```bash
docker pull mongo
```

### Deployment

1. Create a `docker-compose.yml` file with the following content:

   ```yaml
   version: "3.8"
   services:
     backend:
       container_name: "backend_container"
       image: techdome-backend
       restart: always
       environment:
         - PORT=8084
         - MONGODB_URI=mongodb://mongo_db:27017/techdome_db
       depends_on:
         - mongo_db

     mongo_db:
       container_name: "database_container"
       image: mongo:latest

     frontend:
       container_name: "frontend_container"
       image: techdome-frontend
       restart: always
       ports:
         - 3000:3000
       depends_on:
         - mongo_db
   ```

2. Start the application stack using Docker Compose:
   ```bash
   docker-compose up
   ```

# Task 3: Kubernetes Deployment with Minikube

This section covers deploying the application to a local Kubernetes cluster using Minikube.

1. Start Minikube:
   ```bash
   minikube start
   ```

2. Deploy the application using Kubernetes:
   - Ensure you have `deployment.yaml` and `service.yaml` files configured correctly for your application.
   - Apply the Kubernetes configuration:
     ```bash
     kubectl apply -f deployment.yaml
     kubectl apply -f service.yaml
     ```

Replace placeholders in the Kubernetes YAML files with actual values specific to your project setup. This README provides instructions for both Docker Compose and Kubernetes deployments using Minikube.





